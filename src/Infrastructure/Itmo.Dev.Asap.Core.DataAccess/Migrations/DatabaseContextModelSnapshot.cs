// <auto-generated />
using System;
using Itmo.Dev.Asap.Core.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Itmo.Dev.Asap.Core.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.AssignmentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("MaxPoints")
                        .HasColumnType("double precision");

                    b.Property<double>("MinPoints")
                        .HasColumnType("double precision");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectCourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectCourseId");

                    b.HasIndex("ShortName", "SubjectCourseId")
                        .IsUnique();

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.DeadlinePenalties.DeadlinePenaltyModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SpanBeforeActivation")
                        .HasColumnType("bigint");

                    b.Property<Guid>("SubjectCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectCourseId");

                    b.ToTable("DeadlinePenalties");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DeadlinePenaltyModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.GroupAssignmentModel", b =>
                {
                    b.Property<Guid>("StudentGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date");

                    b.HasKey("StudentGroupId", "AssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("GroupAssignments");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.StudentGroupModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectCourseGroupModel", b =>
                {
                    b.Property<Guid>("SubjectCourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectCourseId", "StudentGroupId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("SubjectCourseGroups");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectCourseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("WorkflowType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectCourses");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.SubmissionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<double?>("ExtraPoints")
                        .HasColumnType("double precision");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentGroupId", "AssignmentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.UserAssociations.UserAssociationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Discriminator")
                        .IsUnique();

                    b.ToTable("UserAssociations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserAssociationModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.Users.MentorModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "SubjectCourseId");

                    b.HasIndex("SubjectCourseId");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.Users.StudentModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.Users.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.DeadlinePenalties.AbsoluteDeadlinePenaltyModel", b =>
                {
                    b.HasBaseType("Itmo.Dev.Asap.Core.DataAccess.Models.DeadlinePenalties.DeadlinePenaltyModel");

                    b.Property<double>("AbsoluteValue")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("AbsoluteDeadlinePenalty");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.DeadlinePenalties.CappingDeadlinePenaltyModel", b =>
                {
                    b.HasBaseType("Itmo.Dev.Asap.Core.DataAccess.Models.DeadlinePenalties.DeadlinePenaltyModel");

                    b.Property<double>("Cap")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("CappingDeadlinePenalty");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.DeadlinePenalties.FractionDeadlinePenaltyModel", b =>
                {
                    b.HasBaseType("Itmo.Dev.Asap.Core.DataAccess.Models.DeadlinePenalties.DeadlinePenaltyModel");

                    b.Property<double>("Fraction")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("FractionDeadlinePenalty");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.UserAssociations.IsuUserAssociationModel", b =>
                {
                    b.HasBaseType("Itmo.Dev.Asap.Core.DataAccess.Models.UserAssociations.UserAssociationModel");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasIndex("UniversityId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("IsuUserAssociation");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.AssignmentModel", b =>
                {
                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectCourseModel", "SubjectCourse")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectCourse");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.DeadlinePenalties.DeadlinePenaltyModel", b =>
                {
                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectCourseModel", "SubjectCourse")
                        .WithMany("DeadlinePenalties")
                        .HasForeignKey("SubjectCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectCourse");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.GroupAssignmentModel", b =>
                {
                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.AssignmentModel", "Assignment")
                        .WithMany("GroupAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.StudentGroupModel", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectCourseGroupModel", b =>
                {
                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.StudentGroupModel", "StudentGroup")
                        .WithMany("SubjectCourseGroups")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectCourseModel", "SubjectCourse")
                        .WithMany("SubjectCourseGroups")
                        .HasForeignKey("SubjectCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentGroup");

                    b.Navigation("SubjectCourse");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectCourseModel", b =>
                {
                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectModel", "Subject")
                        .WithMany("SubjectCourses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.SubmissionModel", b =>
                {
                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.Users.StudentModel", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.GroupAssignmentModel", "GroupAssignment")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentGroupId", "AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GroupAssignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.UserAssociations.UserAssociationModel", b =>
                {
                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.Users.UserModel", "User")
                        .WithMany("Associations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.Users.MentorModel", b =>
                {
                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectCourseModel", "SubjectCourse")
                        .WithMany("Mentors")
                        .HasForeignKey("SubjectCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.Users.UserModel", "User")
                        .WithMany("Mentors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectCourse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.Users.StudentModel", b =>
                {
                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.StudentGroupModel", "StudentGroup")
                        .WithMany("Students")
                        .HasForeignKey("StudentGroupId");

                    b.HasOne("Itmo.Dev.Asap.Core.DataAccess.Models.Users.UserModel", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.AssignmentModel", b =>
                {
                    b.Navigation("GroupAssignments");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.GroupAssignmentModel", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.StudentGroupModel", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("SubjectCourseGroups");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectCourseModel", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("DeadlinePenalties");

                    b.Navigation("Mentors");

                    b.Navigation("SubjectCourseGroups");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.SubjectModel", b =>
                {
                    b.Navigation("SubjectCourses");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.Users.StudentModel", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Itmo.Dev.Asap.Core.DataAccess.Models.Users.UserModel", b =>
                {
                    b.Navigation("Associations");

                    b.Navigation("Mentors");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
